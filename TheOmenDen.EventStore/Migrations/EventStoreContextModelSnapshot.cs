// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheOmenDen.EventStore.Persistence;

#nullable disable

namespace TheOmenDen.EventStore.Migrations
{
    [DbContext(typeof(EventStoreContext))]
    partial class EventStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TheOmenDen.EventStore.Logging.Stores.SerializedAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TenantIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Aggregate_Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Aggregates", "Logging");
                });

            modelBuilder.Entity("TheOmenDen.EventStore.Logging.Stores.SerializedCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AggregateIdentifier")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AggregateId");

                    b.Property<string>("CommandClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommandData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommandIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpectedVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("IdentityTenant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SendCancelled")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("SendCompleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SendError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("SendScheduled")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("SendStarted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SendStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_SerializedCommand_Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ExpectedVersion")
                        .HasDatabaseName("IX_CommandExpectedVersion");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ExpectedVersion"), false);
                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ExpectedVersion"), new[] { "SendStatus", "CommandData" });

                    b.ToTable("SerializedCommands", "Logging");
                });

            modelBuilder.Entity("TheOmenDen.EventStore.Logging.Stores.SerializedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("EventData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityTenant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("int");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("int");

                    b.Property<string>("UnderlyingType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_SerializedEvent_Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("MajorVersion", "MinorVersion")
                        .HasDatabaseName("IX_EventMajorMinorVersion");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("MajorVersion", "MinorVersion"), false);
                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("MajorVersion", "MinorVersion"), new[] { "EventType", "EventData" });

                    b.ToTable("SerializedEvents", "Logging");
                });

            modelBuilder.Entity("TheOmenDen.EventStore.Logging.Stores.SerializedSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AggregateMajorVersion")
                        .HasColumnType("int");

                    b.Property<int>("AggregateMinorVersion")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Snapshot_Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("IX_Snapshot_AggregateId");

                    b.HasIndex("AggregateMajorVersion", "AggregateMinorVersion")
                        .HasDatabaseName("IX_Snapshot_AggregateMajorMinorVersion");

                    b.ToTable("Snapshots", "Logging");
                });
#pragma warning restore 612, 618
        }
    }
}
